# Generated from D1.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,5,15,78,8,15,10,15,12,15,81,9,15,1,
        16,4,16,84,8,16,11,16,12,16,85,1,16,1,16,4,16,90,8,16,11,16,12,16,
        91,3,16,94,8,16,1,17,1,17,1,17,5,17,99,8,17,10,17,12,17,102,9,17,
        1,17,1,17,1,17,1,17,5,17,108,8,17,10,17,12,17,111,9,17,1,17,3,17,
        114,8,17,1,18,1,18,1,18,1,19,4,19,120,8,19,11,19,12,19,121,1,19,
        1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,19,1,0,7,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,
        92,92,2,0,39,39,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,3,0,9,10,13,13,32,32,133,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,7,
        47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,0,15,56,1,0,0,
        0,17,59,1,0,0,0,19,62,1,0,0,0,21,65,1,0,0,0,23,67,1,0,0,0,25,69,
        1,0,0,0,27,71,1,0,0,0,29,73,1,0,0,0,31,75,1,0,0,0,33,83,1,0,0,0,
        35,113,1,0,0,0,37,115,1,0,0,0,39,119,1,0,0,0,41,42,5,40,0,0,42,2,
        1,0,0,0,43,44,5,41,0,0,44,4,1,0,0,0,45,46,5,91,0,0,46,6,1,0,0,0,
        47,48,5,44,0,0,48,8,1,0,0,0,49,50,5,93,0,0,50,10,1,0,0,0,51,52,5,
        61,0,0,52,12,1,0,0,0,53,54,5,43,0,0,54,55,5,61,0,0,55,14,1,0,0,0,
        56,57,5,45,0,0,57,58,5,61,0,0,58,16,1,0,0,0,59,60,5,42,0,0,60,61,
        5,61,0,0,61,18,1,0,0,0,62,63,5,47,0,0,63,64,5,61,0,0,64,20,1,0,0,
        0,65,66,5,43,0,0,66,22,1,0,0,0,67,68,5,45,0,0,68,24,1,0,0,0,69,70,
        5,42,0,0,70,26,1,0,0,0,71,72,5,47,0,0,72,28,1,0,0,0,73,74,5,37,0,
        0,74,30,1,0,0,0,75,79,7,0,0,0,76,78,7,1,0,0,77,76,1,0,0,0,78,81,
        1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,32,1,0,0,0,81,79,1,0,0,0,
        82,84,7,2,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,
        0,0,0,86,93,1,0,0,0,87,89,5,46,0,0,88,90,7,2,0,0,89,88,1,0,0,0,90,
        91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,87,1,0,0,
        0,93,94,1,0,0,0,94,34,1,0,0,0,95,100,5,34,0,0,96,99,3,37,18,0,97,
        99,8,3,0,0,98,96,1,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,
        0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,114,5,34,
        0,0,104,109,5,39,0,0,105,108,3,37,18,0,106,108,8,4,0,0,107,105,1,
        0,0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,
        0,0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,114,5,39,0,0,113,95,1,
        0,0,0,113,104,1,0,0,0,114,36,1,0,0,0,115,116,5,92,0,0,116,117,7,
        5,0,0,117,38,1,0,0,0,118,120,7,6,0,0,119,118,1,0,0,0,120,121,1,0,
        0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,6,19,
        0,0,124,40,1,0,0,0,11,0,79,85,91,93,98,100,107,109,113,121,1,6,0,
        0
    ]

class D1Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    IDENTIFIER = 16
    NUMBER = 17
    STRING = 18
    WS = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "','", "']'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "NUMBER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "IDENTIFIER", "NUMBER", "STRING", "ESC_SEQ", 
                  "WS" ]

    grammarFileName = "D1.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


